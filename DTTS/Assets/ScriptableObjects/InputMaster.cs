//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/ScriptableObjects/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""MainPlayer"",
            ""id"": ""3263ade8-92e9-40db-9179-1fa1630bb127"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ec2d2ce0-26d3-47a0-9331-419304275f8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""12b9f9c9-8080-4fb0-8164-af0cd559e09f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SecondPlayer"",
            ""id"": ""867c9345-ffc4-4e0c-af80-a5e3d8121855"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1156b0e8-c110-496b-a9cb-c6741a693b32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b91762e0-5da3-41c9-9a76-20f4441af5e5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainPlayer
        m_MainPlayer = asset.FindActionMap("MainPlayer", throwIfNotFound: true);
        m_MainPlayer_Jump = m_MainPlayer.FindAction("Jump", throwIfNotFound: true);
        // SecondPlayer
        m_SecondPlayer = asset.FindActionMap("SecondPlayer", throwIfNotFound: true);
        m_SecondPlayer_Jump = m_SecondPlayer.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainPlayer
    private readonly InputActionMap m_MainPlayer;
    private IMainPlayerActions m_MainPlayerActionsCallbackInterface;
    private readonly InputAction m_MainPlayer_Jump;
    public struct MainPlayerActions
    {
        private @InputMaster m_Wrapper;
        public MainPlayerActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_MainPlayer_Jump;
        public InputActionMap Get() { return m_Wrapper.m_MainPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IMainPlayerActions instance)
        {
            if (m_Wrapper.m_MainPlayerActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_MainPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public MainPlayerActions @MainPlayer => new MainPlayerActions(this);

    // SecondPlayer
    private readonly InputActionMap m_SecondPlayer;
    private ISecondPlayerActions m_SecondPlayerActionsCallbackInterface;
    private readonly InputAction m_SecondPlayer_Jump;
    public struct SecondPlayerActions
    {
        private @InputMaster m_Wrapper;
        public SecondPlayerActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_SecondPlayer_Jump;
        public InputActionMap Get() { return m_Wrapper.m_SecondPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SecondPlayerActions set) { return set.Get(); }
        public void SetCallbacks(ISecondPlayerActions instance)
        {
            if (m_Wrapper.m_SecondPlayerActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_SecondPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public SecondPlayerActions @SecondPlayer => new SecondPlayerActions(this);
    public interface IMainPlayerActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ISecondPlayerActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
}
